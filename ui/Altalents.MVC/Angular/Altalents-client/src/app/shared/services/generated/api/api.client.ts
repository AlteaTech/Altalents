//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const ENV_APIS_BFF = new InjectionToken<string>('ENV_APIS_BFF');

@Injectable()
export class ApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(ENV_APIS_BFF) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getOctopusInfos(): Observable<ApiInfosSettings> {
        let url_ = this.baseUrl + "/ApiInfos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOctopusInfos(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOctopusInfos(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiInfosSettings>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiInfosSettings>;
        }));
    }

    protected processGetOctopusInfos(response: HttpResponseBase): Observable<ApiInfosSettings> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiInfosSettings.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addDossierTechnique(body?: DossierTechniqueInsertRequestDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/DossiersTechniques";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDossierTechnique(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDossierTechnique(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAddDossierTechnique(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param tokenRapide (optional) 
     * @param body (optional) 
     * @return OK
     */
    isEmailValid(tokenRapide?: string | undefined, body?: string | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/is-email-valid?";
        if (tokenRapide === null)
            throw new Error("The parameter 'tokenRapide' cannot be null.");
        else if (tokenRapide !== undefined)
            url_ += "tokenRapide=" + encodeURIComponent("" + tokenRapide) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsEmailValid(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsEmailValid(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processIsEmailValid(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    isIdBoondValid(body?: string | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/is-idboond-valid";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsIdBoondValid(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsIdBoondValid(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processIsIdBoondValid(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    isTrigrammeValid(body?: string | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/is-trigram-valid";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsTrigrammeValid(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsTrigrammeValid(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processIsTrigrammeValid(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    isTelephoneValid(body?: IsTelephoneValidRequestDto | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/is-telephone-valid";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsTelephoneValid(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsTelephoneValid(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processIsTelephoneValid(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    changerStatutDossierTechnique(id: string, statutId: string): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/{id}/statut/{statutId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (statutId === undefined || statutId === null)
            throw new Error("The parameter 'statutId' must be defined.");
        url_ = url_.replace("{statutId}", encodeURIComponent("" + statutId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangerStatutDossierTechnique(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangerStatutDossierTechnique(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangerStatutDossierTechnique(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getParlonsDeVous(tokenRapide: string): Observable<ParlonsDeVousDto> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenRapide}/parlons-de-vous";
        if (tokenRapide === undefined || tokenRapide === null)
            throw new Error("The parameter 'tokenRapide' must be defined.");
        url_ = url_.replace("{tokenRapide}", encodeURIComponent("" + tokenRapide));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetParlonsDeVous(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetParlonsDeVous(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ParlonsDeVousDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ParlonsDeVousDto>;
        }));
    }

    protected processGetParlonsDeVous(response: HttpResponseBase): Observable<ParlonsDeVousDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParlonsDeVousDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    putParlonsDeVous(tokenRapide: string, body?: ParlonsDeVousUpdateRequestDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenRapide}/parlons-de-vous";
        if (tokenRapide === undefined || tokenRapide === null)
            throw new Error("The parameter 'tokenRapide' must be defined.");
        url_ = url_.replace("{tokenRapide}", encodeURIComponent("" + tokenRapide));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutParlonsDeVous(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutParlonsDeVous(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPutParlonsDeVous(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getQuestionnaires(tokenRapide: string): Observable<QuestionnaireDto[]> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenRapide}/questionnaires";
        if (tokenRapide === undefined || tokenRapide === null)
            throw new Error("The parameter 'tokenRapide' must be defined.");
        url_ = url_.replace("{tokenRapide}", encodeURIComponent("" + tokenRapide));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetQuestionnaires(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetQuestionnaires(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuestionnaireDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuestionnaireDto[]>;
        }));
    }

    protected processGetQuestionnaires(response: HttpResponseBase): Observable<QuestionnaireDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(QuestionnaireDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    setReponseQuestionnaires(body?: QuestionnaireUpdateDto[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/questionnaires-reponse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetReponseQuestionnaires(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetReponseQuestionnaires(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSetReponseQuestionnaires(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getNomPrenomFromToken(tokenAccesRapide: string): Observable<NomPrenomPersonneDto> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/nom-prenom";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNomPrenomFromToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNomPrenomFromToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NomPrenomPersonneDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NomPrenomPersonneDto>;
        }));
    }

    protected processGetNomPrenomFromToken(response: HttpResponseBase): Observable<NomPrenomPersonneDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NomPrenomPersonneDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getExperiences(tokenAccesRapide: string): Observable<ExperienceDto[]> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/experiences";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExperiences(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExperiences(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExperienceDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExperienceDto[]>;
        }));
    }

    protected processGetExperiences(response: HttpResponseBase): Observable<ExperienceDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExperienceDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addExperience(tokenAccesRapide: string, body?: ExperienceRequestDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/experiences";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddExperience(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddExperience(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAddExperience(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateExperience(tokenAccesRapide: string, id: string, body?: ExperienceRequestDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/experiences/{id}";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateExperience(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateExperience(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processUpdateExperience(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    deleteExperience(tokenAccesRapide: string, id: string): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/experiences/{id}";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteExperience(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteExperience(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteExperience(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getDocuments(tokenAccesRapide: string): Observable<DocumentDto[]> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/documents";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDocuments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DocumentDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DocumentDto[]>;
        }));
    }

    protected processGetDocuments(response: HttpResponseBase): Observable<DocumentDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DocumentDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param typeExportEnum (optional) 
     * @return OK
     */
    generateDossierCompetenceFile(tokenAccesRapide: string, typeExportEnum?: TypeExportEnum | undefined): Observable<DocumentDto> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/generate-dt?";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        if (typeExportEnum === null)
            throw new Error("The parameter 'typeExportEnum' cannot be null.");
        else if (typeExportEnum !== undefined)
            url_ += "typeExportEnum=" + encodeURIComponent("" + typeExportEnum) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateDossierCompetenceFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateDossierCompetenceFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DocumentDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DocumentDto>;
        }));
    }

    protected processGenerateDossierCompetenceFile(response: HttpResponseBase): Observable<DocumentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DocumentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param typeExportEnum (optional) 
     * @return OK
     */
    downloadDossierCompetenceFile(tokenAccesRapide: string, typeExportEnum?: TypeExportEnum | undefined): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/download-dt?";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        if (typeExportEnum === null)
            throw new Error("The parameter 'typeExportEnum' cannot be null.");
        else if (typeExportEnum !== undefined)
            url_ += "typeExportEnum=" + encodeURIComponent("" + typeExportEnum) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadDossierCompetenceFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadDossierCompetenceFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDownloadDossierCompetenceFile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param typeLiaisonCode (optional) 
     * @return OK
     */
    getCompetences(tokenAccesRapide: string, typeLiaisonCode?: string | undefined): Observable<CompetenceDto[]> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/competences?";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        if (typeLiaisonCode === null)
            throw new Error("The parameter 'typeLiaisonCode' cannot be null.");
        else if (typeLiaisonCode !== undefined)
            url_ += "typeLiaisonCode=" + encodeURIComponent("" + typeLiaisonCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCompetences(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCompetences(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompetenceDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompetenceDto[]>;
        }));
    }

    protected processGetCompetences(response: HttpResponseBase): Observable<CompetenceDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompetenceDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    putNote(body?: LiaisonExperienceUpdateNiveauDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/competences";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutNote(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPutNote(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAllAboutFormations(tokenAccesRapide: string): Observable<AllAboutFormationsDto> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/formations";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllAboutFormations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllAboutFormations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AllAboutFormationsDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AllAboutFormationsDto>;
        }));
    }

    protected processGetAllAboutFormations(response: HttpResponseBase): Observable<AllAboutFormationsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AllAboutFormationsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addFormationCertification(tokenAccesRapide: string, body?: FormationCertificationRequestDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/formations";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddFormationCertification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddFormationCertification(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAddFormationCertification(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateFormationCertification(tokenAccesRapide: string, id: string, body?: FormationCertificationRequestDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/formations/{id}";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFormationCertification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFormationCertification(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateFormationCertification(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param formationCertificationEnum (optional) 
     * @return OK
     */
    deleteFormationCertification(tokenAccesRapide: string, id: string, formationCertificationEnum?: FormationCertificationEnum | undefined): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/formations/{id}?";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (formationCertificationEnum === null)
            throw new Error("The parameter 'formationCertificationEnum' cannot be null.");
        else if (formationCertificationEnum !== undefined)
            url_ += "formationCertificationEnum=" + encodeURIComponent("" + formationCertificationEnum) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFormationCertification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFormationCertification(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteFormationCertification(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addLangueParlee(tokenAccesRapide: string, body?: LangueParleeRequestDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/langues";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddLangueParlee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddLangueParlee(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAddLangueParlee(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateLangueParlee(tokenAccesRapide: string, id: string, body?: LangueParleeRequestDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/langues/{id}";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateLangueParlee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateLangueParlee(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateLangueParlee(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    deleteLangueParlee(tokenAccesRapide: string, id: string): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/langues/{id}";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteLangueParlee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteLangueParlee(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteLangueParlee(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getRecapitulatif(tokenAccesRapide: string): Observable<RecapitulatifDtDto> {
        let url_ = this.baseUrl + "/DossiersTechniques/{tokenAccesRapide}/recapitulatif";
        if (tokenAccesRapide === undefined || tokenAccesRapide === null)
            throw new Error("The parameter 'tokenAccesRapide' must be defined.");
        url_ = url_.replace("{tokenAccesRapide}", encodeURIComponent("" + tokenAccesRapide));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecapitulatif(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecapitulatif(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RecapitulatifDtDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RecapitulatifDtDto>;
        }));
    }

    protected processGetRecapitulatif(response: HttpResponseBase): Observable<RecapitulatifDtDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecapitulatifDtDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param typeReferenceCode (optional) 
     * @param startWith (optional) 
     * @return OK
     */
    getReferences(typeReferenceCode?: string | undefined, startWith?: string | undefined): Observable<ReferenceDto[]> {
        let url_ = this.baseUrl + "/References?";
        if (typeReferenceCode === null)
            throw new Error("The parameter 'typeReferenceCode' cannot be null.");
        else if (typeReferenceCode !== undefined)
            url_ += "typeReferenceCode=" + encodeURIComponent("" + typeReferenceCode) + "&";
        if (startWith === null)
            throw new Error("The parameter 'startWith' cannot be null.");
        else if (startWith !== undefined)
            url_ += "startWith=" + encodeURIComponent("" + startWith) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReferences(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferences(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReferenceDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReferenceDto[]>;
        }));
    }

    protected processGetReferences(response: HttpResponseBase): Observable<ReferenceDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReferenceDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createReferences(body?: ReferenceRequestDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/References";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateReferences(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateReferences(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateReferences(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getTrigramme(body?: GetTrigrammeRequestDto | undefined): Observable<TrigrammeDto> {
        let url_ = this.baseUrl + "/Trigrammes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTrigramme(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTrigramme(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TrigrammeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TrigrammeDto>;
        }));
    }

    protected processGetTrigramme(response: HttpResponseBase): Observable<TrigrammeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TrigrammeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getUserLoggedDto(): Observable<CustomUserLoggedDto> {
        let url_ = this.baseUrl + "/UserLogged";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserLoggedDto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserLoggedDto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomUserLoggedDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomUserLoggedDto>;
        }));
    }

    protected processGetUserLoggedDto(response: HttpResponseBase): Observable<CustomUserLoggedDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomUserLoggedDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AdresseDto implements IAdresseDto {
    adresse1?: string | null;
    adresse2?: string | null;
    codePostal?: string | null;
    ville?: string | null;
    pays?: string | null;

    constructor(data?: IAdresseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.adresse1 = _data["Adresse1"] !== undefined ? _data["Adresse1"] : <any>null;
            this.adresse2 = _data["Adresse2"] !== undefined ? _data["Adresse2"] : <any>null;
            this.codePostal = _data["CodePostal"] !== undefined ? _data["CodePostal"] : <any>null;
            this.ville = _data["Ville"] !== undefined ? _data["Ville"] : <any>null;
            this.pays = _data["Pays"] !== undefined ? _data["Pays"] : <any>null;
        }
    }

    static fromJS(data: any): AdresseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AdresseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Adresse1"] = this.adresse1 !== undefined ? this.adresse1 : <any>null;
        data["Adresse2"] = this.adresse2 !== undefined ? this.adresse2 : <any>null;
        data["CodePostal"] = this.codePostal !== undefined ? this.codePostal : <any>null;
        data["Ville"] = this.ville !== undefined ? this.ville : <any>null;
        data["Pays"] = this.pays !== undefined ? this.pays : <any>null;
        return data;
    }
}

export interface IAdresseDto {
    adresse1?: string | null;
    adresse2?: string | null;
    codePostal?: string | null;
    ville?: string | null;
    pays?: string | null;
}

export class AdresseUpdateRequestDto implements IAdresseUpdateRequestDto {
    adresse1!: string;
    adresse2?: string | null;
    codePostal!: string;
    ville!: string;
    pays!: string;

    constructor(data?: IAdresseUpdateRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.adresse1 = _data["Adresse1"] !== undefined ? _data["Adresse1"] : <any>null;
            this.adresse2 = _data["Adresse2"] !== undefined ? _data["Adresse2"] : <any>null;
            this.codePostal = _data["CodePostal"] !== undefined ? _data["CodePostal"] : <any>null;
            this.ville = _data["Ville"] !== undefined ? _data["Ville"] : <any>null;
            this.pays = _data["Pays"] !== undefined ? _data["Pays"] : <any>null;
        }
    }

    static fromJS(data: any): AdresseUpdateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new AdresseUpdateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Adresse1"] = this.adresse1 !== undefined ? this.adresse1 : <any>null;
        data["Adresse2"] = this.adresse2 !== undefined ? this.adresse2 : <any>null;
        data["CodePostal"] = this.codePostal !== undefined ? this.codePostal : <any>null;
        data["Ville"] = this.ville !== undefined ? this.ville : <any>null;
        data["Pays"] = this.pays !== undefined ? this.pays : <any>null;
        return data;
    }
}

export interface IAdresseUpdateRequestDto {
    adresse1: string;
    adresse2?: string | null;
    codePostal: string;
    ville: string;
    pays: string;
}

export class AllAboutFormationsDto implements IAllAboutFormationsDto {
    formations?: FormationCertificationDto[] | null;
    certifications?: FormationCertificationDto[] | null;
    languesParlees?: LangueParleeDto[] | null;

    constructor(data?: IAllAboutFormationsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Formations"])) {
                this.formations = [] as any;
                for (let item of _data["Formations"])
                    this.formations!.push(FormationCertificationDto.fromJS(item));
            }
            else {
                this.formations = <any>null;
            }
            if (Array.isArray(_data["Certifications"])) {
                this.certifications = [] as any;
                for (let item of _data["Certifications"])
                    this.certifications!.push(FormationCertificationDto.fromJS(item));
            }
            else {
                this.certifications = <any>null;
            }
            if (Array.isArray(_data["LanguesParlees"])) {
                this.languesParlees = [] as any;
                for (let item of _data["LanguesParlees"])
                    this.languesParlees!.push(LangueParleeDto.fromJS(item));
            }
            else {
                this.languesParlees = <any>null;
            }
        }
    }

    static fromJS(data: any): AllAboutFormationsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AllAboutFormationsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.formations)) {
            data["Formations"] = [];
            for (let item of this.formations)
                data["Formations"].push(item.toJSON());
        }
        if (Array.isArray(this.certifications)) {
            data["Certifications"] = [];
            for (let item of this.certifications)
                data["Certifications"].push(item.toJSON());
        }
        if (Array.isArray(this.languesParlees)) {
            data["LanguesParlees"] = [];
            for (let item of this.languesParlees)
                data["LanguesParlees"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAllAboutFormationsDto {
    formations?: FormationCertificationDto[] | null;
    certifications?: FormationCertificationDto[] | null;
    languesParlees?: LangueParleeDto[] | null;
}

export class ApiInfosSettings implements IApiInfosSettings {
    readonly sectionName?: string | null;
    codeVersion?: string | null;

    constructor(data?: IApiInfosSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).sectionName = _data["SectionName"] !== undefined ? _data["SectionName"] : <any>null;
            this.codeVersion = _data["CodeVersion"] !== undefined ? _data["CodeVersion"] : <any>null;
        }
    }

    static fromJS(data: any): ApiInfosSettings {
        data = typeof data === 'object' ? data : {};
        let result = new ApiInfosSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SectionName"] = this.sectionName !== undefined ? this.sectionName : <any>null;
        data["CodeVersion"] = this.codeVersion !== undefined ? this.codeVersion : <any>null;
        return data;
    }
}

export interface IApiInfosSettings {
    sectionName?: string | null;
    codeVersion?: string | null;
}

export class CompetenceDto implements ICompetenceDto {
    idLiaison!: string;
    libelle?: string | null;
    niveau?: number;

    constructor(data?: ICompetenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idLiaison = _data["IdLiaison"] !== undefined ? _data["IdLiaison"] : <any>null;
            this.libelle = _data["Libelle"] !== undefined ? _data["Libelle"] : <any>null;
            this.niveau = _data["Niveau"] !== undefined ? _data["Niveau"] : <any>null;
        }
    }

    static fromJS(data: any): CompetenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompetenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IdLiaison"] = this.idLiaison !== undefined ? this.idLiaison : <any>null;
        data["Libelle"] = this.libelle !== undefined ? this.libelle : <any>null;
        data["Niveau"] = this.niveau !== undefined ? this.niveau : <any>null;
        return data;
    }
}

export interface ICompetenceDto {
    idLiaison: string;
    libelle?: string | null;
    niveau?: number;
}

export class CompetencesGroupByTypeDto implements ICompetencesGroupByTypeDto {
    competences?: CompetenceDto[] | null;
    methodologies?: CompetenceDto[] | null;
    outils?: CompetenceDto[] | null;
    technologie?: CompetenceDto[] | null;

    constructor(data?: ICompetencesGroupByTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["Competences"])) {
                this.competences = [] as any;
                for (let item of _data["Competences"])
                    this.competences!.push(CompetenceDto.fromJS(item));
            }
            else {
                this.competences = <any>null;
            }
            if (Array.isArray(_data["Methodologies"])) {
                this.methodologies = [] as any;
                for (let item of _data["Methodologies"])
                    this.methodologies!.push(CompetenceDto.fromJS(item));
            }
            else {
                this.methodologies = <any>null;
            }
            if (Array.isArray(_data["Outils"])) {
                this.outils = [] as any;
                for (let item of _data["Outils"])
                    this.outils!.push(CompetenceDto.fromJS(item));
            }
            else {
                this.outils = <any>null;
            }
            if (Array.isArray(_data["Technologie"])) {
                this.technologie = [] as any;
                for (let item of _data["Technologie"])
                    this.technologie!.push(CompetenceDto.fromJS(item));
            }
            else {
                this.technologie = <any>null;
            }
        }
    }

    static fromJS(data: any): CompetencesGroupByTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompetencesGroupByTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.competences)) {
            data["Competences"] = [];
            for (let item of this.competences)
                data["Competences"].push(item.toJSON());
        }
        if (Array.isArray(this.methodologies)) {
            data["Methodologies"] = [];
            for (let item of this.methodologies)
                data["Methodologies"].push(item.toJSON());
        }
        if (Array.isArray(this.outils)) {
            data["Outils"] = [];
            for (let item of this.outils)
                data["Outils"].push(item.toJSON());
        }
        if (Array.isArray(this.technologie)) {
            data["Technologie"] = [];
            for (let item of this.technologie)
                data["Technologie"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICompetencesGroupByTypeDto {
    competences?: CompetenceDto[] | null;
    methodologies?: CompetenceDto[] | null;
    outils?: CompetenceDto[] | null;
    technologie?: CompetenceDto[] | null;
}

export class CustomUserLoggedDto implements ICustomUserLoggedDto {
    nom?: string | null;
    login?: string | null;
    userId?: string;

    constructor(data?: ICustomUserLoggedDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nom = _data["Nom"] !== undefined ? _data["Nom"] : <any>null;
            this.login = _data["Login"] !== undefined ? _data["Login"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
        }
    }

    static fromJS(data: any): CustomUserLoggedDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomUserLoggedDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Nom"] = this.nom !== undefined ? this.nom : <any>null;
        data["Login"] = this.login !== undefined ? this.login : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export interface ICustomUserLoggedDto {
    nom?: string | null;
    login?: string | null;
    userId?: string;
}

export class DocumentDto implements IDocumentDto {
    mimeType!: string;
    nomFichier!: string;
    commentaire?: string | null;
    data!: string;

    constructor(data?: IDocumentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mimeType = _data["MimeType"] !== undefined ? _data["MimeType"] : <any>null;
            this.nomFichier = _data["NomFichier"] !== undefined ? _data["NomFichier"] : <any>null;
            this.commentaire = _data["Commentaire"] !== undefined ? _data["Commentaire"] : <any>null;
            this.data = _data["Data"] !== undefined ? _data["Data"] : <any>null;
        }
    }

    static fromJS(data: any): DocumentDto {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MimeType"] = this.mimeType !== undefined ? this.mimeType : <any>null;
        data["NomFichier"] = this.nomFichier !== undefined ? this.nomFichier : <any>null;
        data["Commentaire"] = this.commentaire !== undefined ? this.commentaire : <any>null;
        data["Data"] = this.data !== undefined ? this.data : <any>null;
        return data;
    }
}

export interface IDocumentDto {
    mimeType: string;
    nomFichier: string;
    commentaire?: string | null;
    data: string;
}

export class DossierTechniqueInsertRequestDto implements IDossierTechniqueInsertRequestDto {
    utilisateurId?: string;
    nom!: string;
    prenom!: string;
    trigramme!: string;
    idBoond!: string;
    adresseMail!: string;
    disponibiliteId!: string;
    telephone?: string | null;
    poste?: string | null;
    tarifJournalier?: number | null;
    questionnaires?: QuestionInsertDto[] | null;
    documents?: DocumentDto[] | null;

    constructor(data?: IDossierTechniqueInsertRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.utilisateurId = _data["UtilisateurId"] !== undefined ? _data["UtilisateurId"] : <any>null;
            this.nom = _data["Nom"] !== undefined ? _data["Nom"] : <any>null;
            this.prenom = _data["Prenom"] !== undefined ? _data["Prenom"] : <any>null;
            this.trigramme = _data["Trigramme"] !== undefined ? _data["Trigramme"] : <any>null;
            this.idBoond = _data["IdBoond"] !== undefined ? _data["IdBoond"] : <any>null;
            this.adresseMail = _data["AdresseMail"] !== undefined ? _data["AdresseMail"] : <any>null;
            this.disponibiliteId = _data["DisponibiliteId"] !== undefined ? _data["DisponibiliteId"] : <any>null;
            this.telephone = _data["Telephone"] !== undefined ? _data["Telephone"] : <any>null;
            this.poste = _data["Poste"] !== undefined ? _data["Poste"] : <any>null;
            this.tarifJournalier = _data["TarifJournalier"] !== undefined ? _data["TarifJournalier"] : <any>null;
            if (Array.isArray(_data["Questionnaires"])) {
                this.questionnaires = [] as any;
                for (let item of _data["Questionnaires"])
                    this.questionnaires!.push(QuestionInsertDto.fromJS(item));
            }
            else {
                this.questionnaires = <any>null;
            }
            if (Array.isArray(_data["Documents"])) {
                this.documents = [] as any;
                for (let item of _data["Documents"])
                    this.documents!.push(DocumentDto.fromJS(item));
            }
            else {
                this.documents = <any>null;
            }
        }
    }

    static fromJS(data: any): DossierTechniqueInsertRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new DossierTechniqueInsertRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UtilisateurId"] = this.utilisateurId !== undefined ? this.utilisateurId : <any>null;
        data["Nom"] = this.nom !== undefined ? this.nom : <any>null;
        data["Prenom"] = this.prenom !== undefined ? this.prenom : <any>null;
        data["Trigramme"] = this.trigramme !== undefined ? this.trigramme : <any>null;
        data["IdBoond"] = this.idBoond !== undefined ? this.idBoond : <any>null;
        data["AdresseMail"] = this.adresseMail !== undefined ? this.adresseMail : <any>null;
        data["DisponibiliteId"] = this.disponibiliteId !== undefined ? this.disponibiliteId : <any>null;
        data["Telephone"] = this.telephone !== undefined ? this.telephone : <any>null;
        data["Poste"] = this.poste !== undefined ? this.poste : <any>null;
        data["TarifJournalier"] = this.tarifJournalier !== undefined ? this.tarifJournalier : <any>null;
        if (Array.isArray(this.questionnaires)) {
            data["Questionnaires"] = [];
            for (let item of this.questionnaires)
                data["Questionnaires"].push(item.toJSON());
        }
        if (Array.isArray(this.documents)) {
            data["Documents"] = [];
            for (let item of this.documents)
                data["Documents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDossierTechniqueInsertRequestDto {
    utilisateurId?: string;
    nom: string;
    prenom: string;
    trigramme: string;
    idBoond: string;
    adresseMail: string;
    disponibiliteId: string;
    telephone?: string | null;
    poste?: string | null;
    tarifJournalier?: number | null;
    questionnaires?: QuestionInsertDto[] | null;
    documents?: DocumentDto[] | null;
}

export class ExperienceDto implements IExperienceDto {
    id!: string;
    intitulePoste!: string;
    nomEntreprise!: string;
    lieuEntreprise!: string;
    description!: string;
    domaineMetier!: ReferenceDto;
    dateDebut!: string;
    typeContrat!: ReferenceDto;
    isEntrepriseEsnOrInterim!: boolean;
    dateFin?: string | null;
    budget?: number | null;
    compositionEquipe?: string | null;
    technologies?: ReferenceDto[] | null;
    methodologies?: ReferenceDto[] | null;
    competences?: ReferenceDto[] | null;
    outils?: ReferenceDto[] | null;
    projetsOrMissionsClient?: ProjetOrMissionClientDto[] | null;

    constructor(data?: IExperienceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.domaineMetier = new ReferenceDto();
            this.typeContrat = new ReferenceDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.intitulePoste = _data["IntitulePoste"] !== undefined ? _data["IntitulePoste"] : <any>null;
            this.nomEntreprise = _data["NomEntreprise"] !== undefined ? _data["NomEntreprise"] : <any>null;
            this.lieuEntreprise = _data["LieuEntreprise"] !== undefined ? _data["LieuEntreprise"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.domaineMetier = _data["DomaineMetier"] ? ReferenceDto.fromJS(_data["DomaineMetier"]) : new ReferenceDto();
            this.dateDebut = _data["DateDebut"] !== undefined ? _data["DateDebut"] : <any>null;
            this.typeContrat = _data["TypeContrat"] ? ReferenceDto.fromJS(_data["TypeContrat"]) : new ReferenceDto();
            this.isEntrepriseEsnOrInterim = _data["IsEntrepriseEsnOrInterim"] !== undefined ? _data["IsEntrepriseEsnOrInterim"] : <any>null;
            this.dateFin = _data["DateFin"] !== undefined ? _data["DateFin"] : <any>null;
            this.budget = _data["Budget"] !== undefined ? _data["Budget"] : <any>null;
            this.compositionEquipe = _data["CompositionEquipe"] !== undefined ? _data["CompositionEquipe"] : <any>null;
            if (Array.isArray(_data["Technologies"])) {
                this.technologies = [] as any;
                for (let item of _data["Technologies"])
                    this.technologies!.push(ReferenceDto.fromJS(item));
            }
            else {
                this.technologies = <any>null;
            }
            if (Array.isArray(_data["Methodologies"])) {
                this.methodologies = [] as any;
                for (let item of _data["Methodologies"])
                    this.methodologies!.push(ReferenceDto.fromJS(item));
            }
            else {
                this.methodologies = <any>null;
            }
            if (Array.isArray(_data["Competences"])) {
                this.competences = [] as any;
                for (let item of _data["Competences"])
                    this.competences!.push(ReferenceDto.fromJS(item));
            }
            else {
                this.competences = <any>null;
            }
            if (Array.isArray(_data["Outils"])) {
                this.outils = [] as any;
                for (let item of _data["Outils"])
                    this.outils!.push(ReferenceDto.fromJS(item));
            }
            else {
                this.outils = <any>null;
            }
            if (Array.isArray(_data["ProjetsOrMissionsClient"])) {
                this.projetsOrMissionsClient = [] as any;
                for (let item of _data["ProjetsOrMissionsClient"])
                    this.projetsOrMissionsClient!.push(ProjetOrMissionClientDto.fromJS(item));
            }
            else {
                this.projetsOrMissionsClient = <any>null;
            }
        }
    }

    static fromJS(data: any): ExperienceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExperienceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["IntitulePoste"] = this.intitulePoste !== undefined ? this.intitulePoste : <any>null;
        data["NomEntreprise"] = this.nomEntreprise !== undefined ? this.nomEntreprise : <any>null;
        data["LieuEntreprise"] = this.lieuEntreprise !== undefined ? this.lieuEntreprise : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["DomaineMetier"] = this.domaineMetier ? this.domaineMetier.toJSON() : <any>null;
        data["DateDebut"] = this.dateDebut !== undefined ? this.dateDebut : <any>null;
        data["TypeContrat"] = this.typeContrat ? this.typeContrat.toJSON() : <any>null;
        data["IsEntrepriseEsnOrInterim"] = this.isEntrepriseEsnOrInterim !== undefined ? this.isEntrepriseEsnOrInterim : <any>null;
        data["DateFin"] = this.dateFin !== undefined ? this.dateFin : <any>null;
        data["Budget"] = this.budget !== undefined ? this.budget : <any>null;
        data["CompositionEquipe"] = this.compositionEquipe !== undefined ? this.compositionEquipe : <any>null;
        if (Array.isArray(this.technologies)) {
            data["Technologies"] = [];
            for (let item of this.technologies)
                data["Technologies"].push(item.toJSON());
        }
        if (Array.isArray(this.methodologies)) {
            data["Methodologies"] = [];
            for (let item of this.methodologies)
                data["Methodologies"].push(item.toJSON());
        }
        if (Array.isArray(this.competences)) {
            data["Competences"] = [];
            for (let item of this.competences)
                data["Competences"].push(item.toJSON());
        }
        if (Array.isArray(this.outils)) {
            data["Outils"] = [];
            for (let item of this.outils)
                data["Outils"].push(item.toJSON());
        }
        if (Array.isArray(this.projetsOrMissionsClient)) {
            data["ProjetsOrMissionsClient"] = [];
            for (let item of this.projetsOrMissionsClient)
                data["ProjetsOrMissionsClient"].push(item.toJSON());
        }
        return data;
    }
}

export interface IExperienceDto {
    id: string;
    intitulePoste: string;
    nomEntreprise: string;
    lieuEntreprise: string;
    description: string;
    domaineMetier: ReferenceDto;
    dateDebut: string;
    typeContrat: ReferenceDto;
    isEntrepriseEsnOrInterim: boolean;
    dateFin?: string | null;
    budget?: number | null;
    compositionEquipe?: string | null;
    technologies?: ReferenceDto[] | null;
    methodologies?: ReferenceDto[] | null;
    competences?: ReferenceDto[] | null;
    outils?: ReferenceDto[] | null;
    projetsOrMissionsClient?: ProjetOrMissionClientDto[] | null;
}

export class ExperienceRequestDto implements IExperienceRequestDto {
    intitulePoste!: string;
    entreprise!: string;
    lieu!: string;
    description!: string;
    domaineMetierId!: string;
    dateDebut!: string;
    typeContratId!: string;
    dateFin?: string | null;
    budget?: number | null;
    isEntrepriseEsnOrInterim?: boolean;
    compositionEquipe?: string | null;
    technologieIds?: string[] | null;
    methodologieIds?: string[] | null;
    competenceIds?: string[] | null;
    outilIds?: string[] | null;
    projetsOrMissionsClient?: ProjetOrMissionClientRequestDto[] | null;

    constructor(data?: IExperienceRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.intitulePoste = _data["IntitulePoste"] !== undefined ? _data["IntitulePoste"] : <any>null;
            this.entreprise = _data["Entreprise"] !== undefined ? _data["Entreprise"] : <any>null;
            this.lieu = _data["Lieu"] !== undefined ? _data["Lieu"] : <any>null;
            this.description = _data["Description"] !== undefined ? _data["Description"] : <any>null;
            this.domaineMetierId = _data["DomaineMetierId"] !== undefined ? _data["DomaineMetierId"] : <any>null;
            this.dateDebut = _data["DateDebut"] !== undefined ? _data["DateDebut"] : <any>null;
            this.typeContratId = _data["TypeContratId"] !== undefined ? _data["TypeContratId"] : <any>null;
            this.dateFin = _data["DateFin"] !== undefined ? _data["DateFin"] : <any>null;
            this.budget = _data["Budget"] !== undefined ? _data["Budget"] : <any>null;
            this.isEntrepriseEsnOrInterim = _data["IsEntrepriseEsnOrInterim"] !== undefined ? _data["IsEntrepriseEsnOrInterim"] : <any>null;
            this.compositionEquipe = _data["CompositionEquipe"] !== undefined ? _data["CompositionEquipe"] : <any>null;
            if (Array.isArray(_data["TechnologieIds"])) {
                this.technologieIds = [] as any;
                for (let item of _data["TechnologieIds"])
                    this.technologieIds!.push(item);
            }
            else {
                this.technologieIds = <any>null;
            }
            if (Array.isArray(_data["MethodologieIds"])) {
                this.methodologieIds = [] as any;
                for (let item of _data["MethodologieIds"])
                    this.methodologieIds!.push(item);
            }
            else {
                this.methodologieIds = <any>null;
            }
            if (Array.isArray(_data["CompetenceIds"])) {
                this.competenceIds = [] as any;
                for (let item of _data["CompetenceIds"])
                    this.competenceIds!.push(item);
            }
            else {
                this.competenceIds = <any>null;
            }
            if (Array.isArray(_data["OutilIds"])) {
                this.outilIds = [] as any;
                for (let item of _data["OutilIds"])
                    this.outilIds!.push(item);
            }
            else {
                this.outilIds = <any>null;
            }
            if (Array.isArray(_data["ProjetsOrMissionsClient"])) {
                this.projetsOrMissionsClient = [] as any;
                for (let item of _data["ProjetsOrMissionsClient"])
                    this.projetsOrMissionsClient!.push(ProjetOrMissionClientRequestDto.fromJS(item));
            }
            else {
                this.projetsOrMissionsClient = <any>null;
            }
        }
    }

    static fromJS(data: any): ExperienceRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExperienceRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IntitulePoste"] = this.intitulePoste !== undefined ? this.intitulePoste : <any>null;
        data["Entreprise"] = this.entreprise !== undefined ? this.entreprise : <any>null;
        data["Lieu"] = this.lieu !== undefined ? this.lieu : <any>null;
        data["Description"] = this.description !== undefined ? this.description : <any>null;
        data["DomaineMetierId"] = this.domaineMetierId !== undefined ? this.domaineMetierId : <any>null;
        data["DateDebut"] = this.dateDebut !== undefined ? this.dateDebut : <any>null;
        data["TypeContratId"] = this.typeContratId !== undefined ? this.typeContratId : <any>null;
        data["DateFin"] = this.dateFin !== undefined ? this.dateFin : <any>null;
        data["Budget"] = this.budget !== undefined ? this.budget : <any>null;
        data["IsEntrepriseEsnOrInterim"] = this.isEntrepriseEsnOrInterim !== undefined ? this.isEntrepriseEsnOrInterim : <any>null;
        data["CompositionEquipe"] = this.compositionEquipe !== undefined ? this.compositionEquipe : <any>null;
        if (Array.isArray(this.technologieIds)) {
            data["TechnologieIds"] = [];
            for (let item of this.technologieIds)
                data["TechnologieIds"].push(item);
        }
        if (Array.isArray(this.methodologieIds)) {
            data["MethodologieIds"] = [];
            for (let item of this.methodologieIds)
                data["MethodologieIds"].push(item);
        }
        if (Array.isArray(this.competenceIds)) {
            data["CompetenceIds"] = [];
            for (let item of this.competenceIds)
                data["CompetenceIds"].push(item);
        }
        if (Array.isArray(this.outilIds)) {
            data["OutilIds"] = [];
            for (let item of this.outilIds)
                data["OutilIds"].push(item);
        }
        if (Array.isArray(this.projetsOrMissionsClient)) {
            data["ProjetsOrMissionsClient"] = [];
            for (let item of this.projetsOrMissionsClient)
                data["ProjetsOrMissionsClient"].push(item.toJSON());
        }
        return data;
    }
}

export interface IExperienceRequestDto {
    intitulePoste: string;
    entreprise: string;
    lieu: string;
    description: string;
    domaineMetierId: string;
    dateDebut: string;
    typeContratId: string;
    dateFin?: string | null;
    budget?: number | null;
    isEntrepriseEsnOrInterim?: boolean;
    compositionEquipe?: string | null;
    technologieIds?: string[] | null;
    methodologieIds?: string[] | null;
    competenceIds?: string[] | null;
    outilIds?: string[] | null;
    projetsOrMissionsClient?: ProjetOrMissionClientRequestDto[] | null;
}

export class FormationCertificationDto implements IFormationCertificationDto {
    id!: string;
    libelle?: string | null;
    domaine?: string | null;
    niveau?: string | null;
    organisme?: string | null;
    dateDebut?: string;
    dateFin?: string | null;

    constructor(data?: IFormationCertificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.libelle = _data["Libelle"] !== undefined ? _data["Libelle"] : <any>null;
            this.domaine = _data["Domaine"] !== undefined ? _data["Domaine"] : <any>null;
            this.niveau = _data["Niveau"] !== undefined ? _data["Niveau"] : <any>null;
            this.organisme = _data["Organisme"] !== undefined ? _data["Organisme"] : <any>null;
            this.dateDebut = _data["DateDebut"] !== undefined ? _data["DateDebut"] : <any>null;
            this.dateFin = _data["DateFin"] !== undefined ? _data["DateFin"] : <any>null;
        }
    }

    static fromJS(data: any): FormationCertificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new FormationCertificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Libelle"] = this.libelle !== undefined ? this.libelle : <any>null;
        data["Domaine"] = this.domaine !== undefined ? this.domaine : <any>null;
        data["Niveau"] = this.niveau !== undefined ? this.niveau : <any>null;
        data["Organisme"] = this.organisme !== undefined ? this.organisme : <any>null;
        data["DateDebut"] = this.dateDebut !== undefined ? this.dateDebut : <any>null;
        data["DateFin"] = this.dateFin !== undefined ? this.dateFin : <any>null;
        return data;
    }
}

export interface IFormationCertificationDto {
    id: string;
    libelle?: string | null;
    domaine?: string | null;
    niveau?: string | null;
    organisme?: string | null;
    dateDebut?: string;
    dateFin?: string | null;
}

export enum FormationCertificationEnum {
    Formation = "Formation",
    Certification = "Certification",
}

export class FormationCertificationRequestDto implements IFormationCertificationRequestDto {
    formationOrCertificationEnumCode?: string | null;
    libelle?: string | null;
    domaine?: string | null;
    niveau?: string | null;
    organisme?: string | null;
    dateDebut!: string;
    dateFin?: string | null;

    constructor(data?: IFormationCertificationRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.formationOrCertificationEnumCode = _data["FormationOrCertificationEnumCode"] !== undefined ? _data["FormationOrCertificationEnumCode"] : <any>null;
            this.libelle = _data["Libelle"] !== undefined ? _data["Libelle"] : <any>null;
            this.domaine = _data["Domaine"] !== undefined ? _data["Domaine"] : <any>null;
            this.niveau = _data["Niveau"] !== undefined ? _data["Niveau"] : <any>null;
            this.organisme = _data["Organisme"] !== undefined ? _data["Organisme"] : <any>null;
            this.dateDebut = _data["DateDebut"] !== undefined ? _data["DateDebut"] : <any>null;
            this.dateFin = _data["DateFin"] !== undefined ? _data["DateFin"] : <any>null;
        }
    }

    static fromJS(data: any): FormationCertificationRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new FormationCertificationRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FormationOrCertificationEnumCode"] = this.formationOrCertificationEnumCode !== undefined ? this.formationOrCertificationEnumCode : <any>null;
        data["Libelle"] = this.libelle !== undefined ? this.libelle : <any>null;
        data["Domaine"] = this.domaine !== undefined ? this.domaine : <any>null;
        data["Niveau"] = this.niveau !== undefined ? this.niveau : <any>null;
        data["Organisme"] = this.organisme !== undefined ? this.organisme : <any>null;
        data["DateDebut"] = this.dateDebut !== undefined ? this.dateDebut : <any>null;
        data["DateFin"] = this.dateFin !== undefined ? this.dateFin : <any>null;
        return data;
    }
}

export interface IFormationCertificationRequestDto {
    formationOrCertificationEnumCode?: string | null;
    libelle?: string | null;
    domaine?: string | null;
    niveau?: string | null;
    organisme?: string | null;
    dateDebut: string;
    dateFin?: string | null;
}

export class GetTrigrammeRequestDto implements IGetTrigrammeRequestDto {
    nom!: string;
    prenom!: string;

    constructor(data?: IGetTrigrammeRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nom = _data["Nom"] !== undefined ? _data["Nom"] : <any>null;
            this.prenom = _data["Prenom"] !== undefined ? _data["Prenom"] : <any>null;
        }
    }

    static fromJS(data: any): GetTrigrammeRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTrigrammeRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Nom"] = this.nom !== undefined ? this.nom : <any>null;
        data["Prenom"] = this.prenom !== undefined ? this.prenom : <any>null;
        return data;
    }
}

export interface IGetTrigrammeRequestDto {
    nom: string;
    prenom: string;
}

export class IsTelephoneValidRequestDto implements IIsTelephoneValidRequestDto {
    telephone?: string | null;
    isOptionnal?: boolean;

    constructor(data?: IIsTelephoneValidRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.telephone = _data["Telephone"] !== undefined ? _data["Telephone"] : <any>null;
            this.isOptionnal = _data["IsOptionnal"] !== undefined ? _data["IsOptionnal"] : <any>null;
        }
    }

    static fromJS(data: any): IsTelephoneValidRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new IsTelephoneValidRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Telephone"] = this.telephone !== undefined ? this.telephone : <any>null;
        data["IsOptionnal"] = this.isOptionnal !== undefined ? this.isOptionnal : <any>null;
        return data;
    }
}

export interface IIsTelephoneValidRequestDto {
    telephone?: string | null;
    isOptionnal?: boolean;
}

export class LangueParleeDto implements ILangueParleeDto {
    dossierTechniqueLangueId!: string;
    idLangue?: string;
    libelleLangue?: string | null;
    idReferenceNiveau?: string;
    libelleReferenceNiveau?: string | null;

    constructor(data?: ILangueParleeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dossierTechniqueLangueId = _data["DossierTechniqueLangueId"] !== undefined ? _data["DossierTechniqueLangueId"] : <any>null;
            this.idLangue = _data["IdLangue"] !== undefined ? _data["IdLangue"] : <any>null;
            this.libelleLangue = _data["LibelleLangue"] !== undefined ? _data["LibelleLangue"] : <any>null;
            this.idReferenceNiveau = _data["IdReferenceNiveau"] !== undefined ? _data["IdReferenceNiveau"] : <any>null;
            this.libelleReferenceNiveau = _data["LibelleReferenceNiveau"] !== undefined ? _data["LibelleReferenceNiveau"] : <any>null;
        }
    }

    static fromJS(data: any): LangueParleeDto {
        data = typeof data === 'object' ? data : {};
        let result = new LangueParleeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["DossierTechniqueLangueId"] = this.dossierTechniqueLangueId !== undefined ? this.dossierTechniqueLangueId : <any>null;
        data["IdLangue"] = this.idLangue !== undefined ? this.idLangue : <any>null;
        data["LibelleLangue"] = this.libelleLangue !== undefined ? this.libelleLangue : <any>null;
        data["IdReferenceNiveau"] = this.idReferenceNiveau !== undefined ? this.idReferenceNiveau : <any>null;
        data["LibelleReferenceNiveau"] = this.libelleReferenceNiveau !== undefined ? this.libelleReferenceNiveau : <any>null;
        return data;
    }
}

export interface ILangueParleeDto {
    dossierTechniqueLangueId: string;
    idLangue?: string;
    libelleLangue?: string | null;
    idReferenceNiveau?: string;
    libelleReferenceNiveau?: string | null;
}

export class LangueParleeRequestDto implements ILangueParleeRequestDto {
    langueId!: string;
    niveauId!: string;

    constructor(data?: ILangueParleeRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.langueId = _data["LangueId"] !== undefined ? _data["LangueId"] : <any>null;
            this.niveauId = _data["NiveauId"] !== undefined ? _data["NiveauId"] : <any>null;
        }
    }

    static fromJS(data: any): LangueParleeRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new LangueParleeRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LangueId"] = this.langueId !== undefined ? this.langueId : <any>null;
        data["NiveauId"] = this.niveauId !== undefined ? this.niveauId : <any>null;
        return data;
    }
}

export interface ILangueParleeRequestDto {
    langueId: string;
    niveauId: string;
}

export class LiaisonExperienceUpdateNiveauDto implements ILiaisonExperienceUpdateNiveauDto {
    liaisonId!: string;
    typeLiaisonCode?: string | null;
    note!: number;

    constructor(data?: ILiaisonExperienceUpdateNiveauDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.liaisonId = _data["LiaisonId"] !== undefined ? _data["LiaisonId"] : <any>null;
            this.typeLiaisonCode = _data["TypeLiaisonCode"] !== undefined ? _data["TypeLiaisonCode"] : <any>null;
            this.note = _data["Note"] !== undefined ? _data["Note"] : <any>null;
        }
    }

    static fromJS(data: any): LiaisonExperienceUpdateNiveauDto {
        data = typeof data === 'object' ? data : {};
        let result = new LiaisonExperienceUpdateNiveauDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["LiaisonId"] = this.liaisonId !== undefined ? this.liaisonId : <any>null;
        data["TypeLiaisonCode"] = this.typeLiaisonCode !== undefined ? this.typeLiaisonCode : <any>null;
        data["Note"] = this.note !== undefined ? this.note : <any>null;
        return data;
    }
}

export interface ILiaisonExperienceUpdateNiveauDto {
    liaisonId: string;
    typeLiaisonCode?: string | null;
    note: number;
}

export class NomPrenomPersonneDto implements INomPrenomPersonneDto {
    nom?: string | null;
    prenom?: string | null;

    constructor(data?: INomPrenomPersonneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nom = _data["Nom"] !== undefined ? _data["Nom"] : <any>null;
            this.prenom = _data["Prenom"] !== undefined ? _data["Prenom"] : <any>null;
        }
    }

    static fromJS(data: any): NomPrenomPersonneDto {
        data = typeof data === 'object' ? data : {};
        let result = new NomPrenomPersonneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Nom"] = this.nom !== undefined ? this.nom : <any>null;
        data["Prenom"] = this.prenom !== undefined ? this.prenom : <any>null;
        return data;
    }
}

export interface INomPrenomPersonneDto {
    nom?: string | null;
    prenom?: string | null;
}

export class ParlonsDeVousDto implements IParlonsDeVousDto {
    prenom?: string | null;
    nom?: string | null;
    telephone1?: string | null;
    telephone2?: string | null;
    email?: string | null;
    adresse?: AdresseDto;
    synthese?: string | null;
    documents?: DocumentDto[] | null;

    constructor(data?: IParlonsDeVousDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prenom = _data["Prenom"] !== undefined ? _data["Prenom"] : <any>null;
            this.nom = _data["Nom"] !== undefined ? _data["Nom"] : <any>null;
            this.telephone1 = _data["Telephone1"] !== undefined ? _data["Telephone1"] : <any>null;
            this.telephone2 = _data["Telephone2"] !== undefined ? _data["Telephone2"] : <any>null;
            this.email = _data["Email"] !== undefined ? _data["Email"] : <any>null;
            this.adresse = _data["Adresse"] ? AdresseDto.fromJS(_data["Adresse"]) : <any>null;
            this.synthese = _data["Synthese"] !== undefined ? _data["Synthese"] : <any>null;
            if (Array.isArray(_data["Documents"])) {
                this.documents = [] as any;
                for (let item of _data["Documents"])
                    this.documents!.push(DocumentDto.fromJS(item));
            }
            else {
                this.documents = <any>null;
            }
        }
    }

    static fromJS(data: any): ParlonsDeVousDto {
        data = typeof data === 'object' ? data : {};
        let result = new ParlonsDeVousDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Prenom"] = this.prenom !== undefined ? this.prenom : <any>null;
        data["Nom"] = this.nom !== undefined ? this.nom : <any>null;
        data["Telephone1"] = this.telephone1 !== undefined ? this.telephone1 : <any>null;
        data["Telephone2"] = this.telephone2 !== undefined ? this.telephone2 : <any>null;
        data["Email"] = this.email !== undefined ? this.email : <any>null;
        data["Adresse"] = this.adresse ? this.adresse.toJSON() : <any>null;
        data["Synthese"] = this.synthese !== undefined ? this.synthese : <any>null;
        if (Array.isArray(this.documents)) {
            data["Documents"] = [];
            for (let item of this.documents)
                data["Documents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IParlonsDeVousDto {
    prenom?: string | null;
    nom?: string | null;
    telephone1?: string | null;
    telephone2?: string | null;
    email?: string | null;
    adresse?: AdresseDto;
    synthese?: string | null;
    documents?: DocumentDto[] | null;
}

export class ParlonsDeVousUpdateRequestDto implements IParlonsDeVousUpdateRequestDto {
    prenom!: string;
    nom!: string;
    telephone1!: string;
    telephone2?: string | null;
    email!: string;
    adresse!: AdresseUpdateRequestDto;
    synthese?: string | null;
    documents?: DocumentDto[] | null;

    constructor(data?: IParlonsDeVousUpdateRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.adresse = new AdresseUpdateRequestDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prenom = _data["Prenom"] !== undefined ? _data["Prenom"] : <any>null;
            this.nom = _data["Nom"] !== undefined ? _data["Nom"] : <any>null;
            this.telephone1 = _data["Telephone1"] !== undefined ? _data["Telephone1"] : <any>null;
            this.telephone2 = _data["Telephone2"] !== undefined ? _data["Telephone2"] : <any>null;
            this.email = _data["Email"] !== undefined ? _data["Email"] : <any>null;
            this.adresse = _data["Adresse"] ? AdresseUpdateRequestDto.fromJS(_data["Adresse"]) : new AdresseUpdateRequestDto();
            this.synthese = _data["Synthese"] !== undefined ? _data["Synthese"] : <any>null;
            if (Array.isArray(_data["Documents"])) {
                this.documents = [] as any;
                for (let item of _data["Documents"])
                    this.documents!.push(DocumentDto.fromJS(item));
            }
            else {
                this.documents = <any>null;
            }
        }
    }

    static fromJS(data: any): ParlonsDeVousUpdateRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ParlonsDeVousUpdateRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Prenom"] = this.prenom !== undefined ? this.prenom : <any>null;
        data["Nom"] = this.nom !== undefined ? this.nom : <any>null;
        data["Telephone1"] = this.telephone1 !== undefined ? this.telephone1 : <any>null;
        data["Telephone2"] = this.telephone2 !== undefined ? this.telephone2 : <any>null;
        data["Email"] = this.email !== undefined ? this.email : <any>null;
        data["Adresse"] = this.adresse ? this.adresse.toJSON() : <any>null;
        data["Synthese"] = this.synthese !== undefined ? this.synthese : <any>null;
        if (Array.isArray(this.documents)) {
            data["Documents"] = [];
            for (let item of this.documents)
                data["Documents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IParlonsDeVousUpdateRequestDto {
    prenom: string;
    nom: string;
    telephone1: string;
    telephone2?: string | null;
    email: string;
    adresse: AdresseUpdateRequestDto;
    synthese?: string | null;
    documents?: DocumentDto[] | null;
}

export class ProjetOrMissionClientDto implements IProjetOrMissionClientDto {
    nomClientOrProjet?: string | null;
    descriptionProjetOrMission?: string | null;
    taches?: string | null;
    lieu?: string | null;
    compositionEquipe?: string | null;
    budget?: number | null;
    dateDebut?: string | null;
    dateFin?: string | null;
    domaineMetier?: ReferenceDto;

    constructor(data?: IProjetOrMissionClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nomClientOrProjet = _data["NomClientOrProjet"] !== undefined ? _data["NomClientOrProjet"] : <any>null;
            this.descriptionProjetOrMission = _data["DescriptionProjetOrMission"] !== undefined ? _data["DescriptionProjetOrMission"] : <any>null;
            this.taches = _data["Taches"] !== undefined ? _data["Taches"] : <any>null;
            this.lieu = _data["Lieu"] !== undefined ? _data["Lieu"] : <any>null;
            this.compositionEquipe = _data["CompositionEquipe"] !== undefined ? _data["CompositionEquipe"] : <any>null;
            this.budget = _data["Budget"] !== undefined ? _data["Budget"] : <any>null;
            this.dateDebut = _data["DateDebut"] !== undefined ? _data["DateDebut"] : <any>null;
            this.dateFin = _data["DateFin"] !== undefined ? _data["DateFin"] : <any>null;
            this.domaineMetier = _data["DomaineMetier"] ? ReferenceDto.fromJS(_data["DomaineMetier"]) : <any>null;
        }
    }

    static fromJS(data: any): ProjetOrMissionClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetOrMissionClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["NomClientOrProjet"] = this.nomClientOrProjet !== undefined ? this.nomClientOrProjet : <any>null;
        data["DescriptionProjetOrMission"] = this.descriptionProjetOrMission !== undefined ? this.descriptionProjetOrMission : <any>null;
        data["Taches"] = this.taches !== undefined ? this.taches : <any>null;
        data["Lieu"] = this.lieu !== undefined ? this.lieu : <any>null;
        data["CompositionEquipe"] = this.compositionEquipe !== undefined ? this.compositionEquipe : <any>null;
        data["Budget"] = this.budget !== undefined ? this.budget : <any>null;
        data["DateDebut"] = this.dateDebut !== undefined ? this.dateDebut : <any>null;
        data["DateFin"] = this.dateFin !== undefined ? this.dateFin : <any>null;
        data["DomaineMetier"] = this.domaineMetier ? this.domaineMetier.toJSON() : <any>null;
        return data;
    }
}

export interface IProjetOrMissionClientDto {
    nomClientOrProjet?: string | null;
    descriptionProjetOrMission?: string | null;
    taches?: string | null;
    lieu?: string | null;
    compositionEquipe?: string | null;
    budget?: number | null;
    dateDebut?: string | null;
    dateFin?: string | null;
    domaineMetier?: ReferenceDto;
}

export class ProjetOrMissionClientRequestDto implements IProjetOrMissionClientRequestDto {
    nomClientOrProjet?: string | null;
    descriptionProjetOrMission!: string;
    taches!: string;
    lieu?: string | null;
    compositionEquipe?: string | null;
    budget?: number | null;
    dateDebut?: string | null;
    dateFin?: string | null;
    domaineMetierId?: string | null;

    constructor(data?: IProjetOrMissionClientRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nomClientOrProjet = _data["NomClientOrProjet"] !== undefined ? _data["NomClientOrProjet"] : <any>null;
            this.descriptionProjetOrMission = _data["DescriptionProjetOrMission"] !== undefined ? _data["DescriptionProjetOrMission"] : <any>null;
            this.taches = _data["Taches"] !== undefined ? _data["Taches"] : <any>null;
            this.lieu = _data["Lieu"] !== undefined ? _data["Lieu"] : <any>null;
            this.compositionEquipe = _data["CompositionEquipe"] !== undefined ? _data["CompositionEquipe"] : <any>null;
            this.budget = _data["Budget"] !== undefined ? _data["Budget"] : <any>null;
            this.dateDebut = _data["DateDebut"] !== undefined ? _data["DateDebut"] : <any>null;
            this.dateFin = _data["DateFin"] !== undefined ? _data["DateFin"] : <any>null;
            this.domaineMetierId = _data["DomaineMetierId"] !== undefined ? _data["DomaineMetierId"] : <any>null;
        }
    }

    static fromJS(data: any): ProjetOrMissionClientRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjetOrMissionClientRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["NomClientOrProjet"] = this.nomClientOrProjet !== undefined ? this.nomClientOrProjet : <any>null;
        data["DescriptionProjetOrMission"] = this.descriptionProjetOrMission !== undefined ? this.descriptionProjetOrMission : <any>null;
        data["Taches"] = this.taches !== undefined ? this.taches : <any>null;
        data["Lieu"] = this.lieu !== undefined ? this.lieu : <any>null;
        data["CompositionEquipe"] = this.compositionEquipe !== undefined ? this.compositionEquipe : <any>null;
        data["Budget"] = this.budget !== undefined ? this.budget : <any>null;
        data["DateDebut"] = this.dateDebut !== undefined ? this.dateDebut : <any>null;
        data["DateFin"] = this.dateFin !== undefined ? this.dateFin : <any>null;
        data["DomaineMetierId"] = this.domaineMetierId !== undefined ? this.domaineMetierId : <any>null;
        return data;
    }
}

export interface IProjetOrMissionClientRequestDto {
    nomClientOrProjet?: string | null;
    descriptionProjetOrMission: string;
    taches: string;
    lieu?: string | null;
    compositionEquipe?: string | null;
    budget?: number | null;
    dateDebut?: string | null;
    dateFin?: string | null;
    domaineMetierId?: string | null;
}

export class QuestionInsertDto implements IQuestionInsertDto {
    ordre?: number;
    isObligatoire?: boolean;
    isShowDt?: boolean;
    question?: string | null;

    constructor(data?: IQuestionInsertDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ordre = _data["Ordre"] !== undefined ? _data["Ordre"] : <any>null;
            this.isObligatoire = _data["IsObligatoire"] !== undefined ? _data["IsObligatoire"] : <any>null;
            this.isShowDt = _data["IsShowDt"] !== undefined ? _data["IsShowDt"] : <any>null;
            this.question = _data["Question"] !== undefined ? _data["Question"] : <any>null;
        }
    }

    static fromJS(data: any): QuestionInsertDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionInsertDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ordre"] = this.ordre !== undefined ? this.ordre : <any>null;
        data["IsObligatoire"] = this.isObligatoire !== undefined ? this.isObligatoire : <any>null;
        data["IsShowDt"] = this.isShowDt !== undefined ? this.isShowDt : <any>null;
        data["Question"] = this.question !== undefined ? this.question : <any>null;
        return data;
    }
}

export interface IQuestionInsertDto {
    ordre?: number;
    isObligatoire?: boolean;
    isShowDt?: boolean;
    question?: string | null;
}

export class QuestionnaireDto implements IQuestionnaireDto {
    id!: string;
    isObligatoire!: boolean;
    question?: string | null;
    reponse?: string | null;

    constructor(data?: IQuestionnaireDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.isObligatoire = _data["IsObligatoire"] !== undefined ? _data["IsObligatoire"] : <any>null;
            this.question = _data["Question"] !== undefined ? _data["Question"] : <any>null;
            this.reponse = _data["Reponse"] !== undefined ? _data["Reponse"] : <any>null;
        }
    }

    static fromJS(data: any): QuestionnaireDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionnaireDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["IsObligatoire"] = this.isObligatoire !== undefined ? this.isObligatoire : <any>null;
        data["Question"] = this.question !== undefined ? this.question : <any>null;
        data["Reponse"] = this.reponse !== undefined ? this.reponse : <any>null;
        return data;
    }
}

export interface IQuestionnaireDto {
    id: string;
    isObligatoire: boolean;
    question?: string | null;
    reponse?: string | null;
}

export class QuestionnaireUpdateDto implements IQuestionnaireUpdateDto {
    id!: string;
    reponse?: string | null;

    constructor(data?: IQuestionnaireUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.reponse = _data["Reponse"] !== undefined ? _data["Reponse"] : <any>null;
        }
    }

    static fromJS(data: any): QuestionnaireUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionnaireUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Reponse"] = this.reponse !== undefined ? this.reponse : <any>null;
        return data;
    }
}

export interface IQuestionnaireUpdateDto {
    id: string;
    reponse?: string | null;
}

export class RecapitulatifDtDto implements IRecapitulatifDtDto {
    parlonsDeVous?: ParlonsDeVousDto;
    formations?: FormationCertificationDto[] | null;
    certifications?: FormationCertificationDto[] | null;
    experiences?: ExperienceDto[] | null;
    langues?: LangueParleeDto[] | null;
    questionnaires?: QuestionnaireDto[] | null;
    competences?: CompetencesGroupByTypeDto;

    constructor(data?: IRecapitulatifDtDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parlonsDeVous = _data["ParlonsDeVous"] ? ParlonsDeVousDto.fromJS(_data["ParlonsDeVous"]) : <any>null;
            if (Array.isArray(_data["Formations"])) {
                this.formations = [] as any;
                for (let item of _data["Formations"])
                    this.formations!.push(FormationCertificationDto.fromJS(item));
            }
            else {
                this.formations = <any>null;
            }
            if (Array.isArray(_data["Certifications"])) {
                this.certifications = [] as any;
                for (let item of _data["Certifications"])
                    this.certifications!.push(FormationCertificationDto.fromJS(item));
            }
            else {
                this.certifications = <any>null;
            }
            if (Array.isArray(_data["Experiences"])) {
                this.experiences = [] as any;
                for (let item of _data["Experiences"])
                    this.experiences!.push(ExperienceDto.fromJS(item));
            }
            else {
                this.experiences = <any>null;
            }
            if (Array.isArray(_data["Langues"])) {
                this.langues = [] as any;
                for (let item of _data["Langues"])
                    this.langues!.push(LangueParleeDto.fromJS(item));
            }
            else {
                this.langues = <any>null;
            }
            if (Array.isArray(_data["Questionnaires"])) {
                this.questionnaires = [] as any;
                for (let item of _data["Questionnaires"])
                    this.questionnaires!.push(QuestionnaireDto.fromJS(item));
            }
            else {
                this.questionnaires = <any>null;
            }
            this.competences = _data["Competences"] ? CompetencesGroupByTypeDto.fromJS(_data["Competences"]) : <any>null;
        }
    }

    static fromJS(data: any): RecapitulatifDtDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecapitulatifDtDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ParlonsDeVous"] = this.parlonsDeVous ? this.parlonsDeVous.toJSON() : <any>null;
        if (Array.isArray(this.formations)) {
            data["Formations"] = [];
            for (let item of this.formations)
                data["Formations"].push(item.toJSON());
        }
        if (Array.isArray(this.certifications)) {
            data["Certifications"] = [];
            for (let item of this.certifications)
                data["Certifications"].push(item.toJSON());
        }
        if (Array.isArray(this.experiences)) {
            data["Experiences"] = [];
            for (let item of this.experiences)
                data["Experiences"].push(item.toJSON());
        }
        if (Array.isArray(this.langues)) {
            data["Langues"] = [];
            for (let item of this.langues)
                data["Langues"].push(item.toJSON());
        }
        if (Array.isArray(this.questionnaires)) {
            data["Questionnaires"] = [];
            for (let item of this.questionnaires)
                data["Questionnaires"].push(item.toJSON());
        }
        data["Competences"] = this.competences ? this.competences.toJSON() : <any>null;
        return data;
    }
}

export interface IRecapitulatifDtDto {
    parlonsDeVous?: ParlonsDeVousDto;
    formations?: FormationCertificationDto[] | null;
    certifications?: FormationCertificationDto[] | null;
    experiences?: ExperienceDto[] | null;
    langues?: LangueParleeDto[] | null;
    questionnaires?: QuestionnaireDto[] | null;
    competences?: CompetencesGroupByTypeDto;
}

export class ReferenceDto implements IReferenceDto {
    id!: string;
    libelle?: string | null;
    commentaireFun?: string | null;

    constructor(data?: IReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.libelle = _data["Libelle"] !== undefined ? _data["Libelle"] : <any>null;
            this.commentaireFun = _data["CommentaireFun"] !== undefined ? _data["CommentaireFun"] : <any>null;
        }
    }

    static fromJS(data: any): ReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Libelle"] = this.libelle !== undefined ? this.libelle : <any>null;
        data["CommentaireFun"] = this.commentaireFun !== undefined ? this.commentaireFun : <any>null;
        return data;
    }
}

export interface IReferenceDto {
    id: string;
    libelle?: string | null;
    commentaireFun?: string | null;
}

export class ReferenceRequestDto implements IReferenceRequestDto {
    typeReference!: string;
    libelle!: string;

    constructor(data?: IReferenceRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.typeReference = _data["TypeReference"] !== undefined ? _data["TypeReference"] : <any>null;
            this.libelle = _data["Libelle"] !== undefined ? _data["Libelle"] : <any>null;
        }
    }

    static fromJS(data: any): ReferenceRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TypeReference"] = this.typeReference !== undefined ? this.typeReference : <any>null;
        data["Libelle"] = this.libelle !== undefined ? this.libelle : <any>null;
        return data;
    }
}

export interface IReferenceRequestDto {
    typeReference: string;
    libelle: string;
}

export class TrigrammeDto implements ITrigrammeDto {
    valeur!: string;

    constructor(data?: ITrigrammeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.valeur = _data["Valeur"] !== undefined ? _data["Valeur"] : <any>null;
        }
    }

    static fromJS(data: any): TrigrammeDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrigrammeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Valeur"] = this.valeur !== undefined ? this.valeur : <any>null;
        return data;
    }
}

export interface ITrigrammeDto {
    valeur: string;
}

export enum TypeExportEnum {
    PDF = "PDF",
    RTF = "RTF",
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}