//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const ENV_APIS_BFF = new InjectionToken<string>('ENV_APIS_BFF');

@Injectable()
export class ApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(ENV_APIS_BFF) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addDossierTechnique(body?: DossierTechniqueInsertRequestDto | undefined): Observable<string> {
        let url_ = this.baseUrl + "/DossiersTechniques";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDossierTechnique(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDossierTechnique(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAddDossierTechnique(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    isEmailValid(body?: string | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/is-email-valid";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsEmailValid(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsEmailValid(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processIsEmailValid(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    changerStatutDossierTechnique(id: string, statutId: string): Observable<void> {
        let url_ = this.baseUrl + "/DossiersTechniques/{id}/statut/{statutId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (statutId === undefined || statutId === null)
            throw new Error("The parameter 'statutId' must be defined.");
        url_ = url_.replace("{statutId}", encodeURIComponent("" + statutId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangerStatutDossierTechnique(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangerStatutDossierTechnique(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangerStatutDossierTechnique(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param typeReferenceCode (optional) 
     * @return OK
     */
    getReferences(typeReferenceCode?: string | undefined): Observable<ReferenceDto[]> {
        let url_ = this.baseUrl + "/References?";
        if (typeReferenceCode === null)
            throw new Error("The parameter 'typeReferenceCode' cannot be null.");
        else if (typeReferenceCode !== undefined)
            url_ += "typeReferenceCode=" + encodeURIComponent("" + typeReferenceCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReferences(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReferences(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReferenceDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReferenceDto[]>;
        }));
    }

    protected processGetReferences(response: HttpResponseBase): Observable<ReferenceDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReferenceDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getTrigramme(body?: GetTrigrammeRequestDto | undefined): Observable<TrigrammeDto> {
        let url_ = this.baseUrl + "/Trigrammes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTrigramme(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTrigramme(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TrigrammeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TrigrammeDto>;
        }));
    }

    protected processGetTrigramme(response: HttpResponseBase): Observable<TrigrammeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TrigrammeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getUserLoggedDto(): Observable<CustomUserLoggedDto> {
        let url_ = this.baseUrl + "/UserLogged";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserLoggedDto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserLoggedDto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomUserLoggedDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomUserLoggedDto>;
        }));
    }

    protected processGetUserLoggedDto(response: HttpResponseBase): Observable<CustomUserLoggedDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomUserLoggedDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CustomUserLoggedDto implements ICustomUserLoggedDto {
    nom?: string | null;
    login?: string | null;
    userId?: string;

    constructor(data?: ICustomUserLoggedDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nom = _data["Nom"] !== undefined ? _data["Nom"] : <any>null;
            this.login = _data["Login"] !== undefined ? _data["Login"] : <any>null;
            this.userId = _data["UserId"] !== undefined ? _data["UserId"] : <any>null;
        }
    }

    static fromJS(data: any): CustomUserLoggedDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomUserLoggedDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Nom"] = this.nom !== undefined ? this.nom : <any>null;
        data["Login"] = this.login !== undefined ? this.login : <any>null;
        data["UserId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export interface ICustomUserLoggedDto {
    nom?: string | null;
    login?: string | null;
    userId?: string;
}

export class DossierTechniqueInsertRequestDto implements IDossierTechniqueInsertRequestDto {
    utilisateurId?: string;
    nom!: string;
    prenom!: string;
    trigramme!: string;
    idBoond!: string;
    adresseMail!: string;
    disponibiliteId!: string;
    telephone?: string | null;
    poste?: string | null;
    tarifJournalier?: number | null;

    constructor(data?: IDossierTechniqueInsertRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.utilisateurId = _data["UtilisateurId"] !== undefined ? _data["UtilisateurId"] : <any>null;
            this.nom = _data["Nom"] !== undefined ? _data["Nom"] : <any>null;
            this.prenom = _data["Prenom"] !== undefined ? _data["Prenom"] : <any>null;
            this.trigramme = _data["Trigramme"] !== undefined ? _data["Trigramme"] : <any>null;
            this.idBoond = _data["IdBoond"] !== undefined ? _data["IdBoond"] : <any>null;
            this.adresseMail = _data["AdresseMail"] !== undefined ? _data["AdresseMail"] : <any>null;
            this.disponibiliteId = _data["DisponibiliteId"] !== undefined ? _data["DisponibiliteId"] : <any>null;
            this.telephone = _data["Telephone"] !== undefined ? _data["Telephone"] : <any>null;
            this.poste = _data["Poste"] !== undefined ? _data["Poste"] : <any>null;
            this.tarifJournalier = _data["TarifJournalier"] !== undefined ? _data["TarifJournalier"] : <any>null;
        }
    }

    static fromJS(data: any): DossierTechniqueInsertRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new DossierTechniqueInsertRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UtilisateurId"] = this.utilisateurId !== undefined ? this.utilisateurId : <any>null;
        data["Nom"] = this.nom !== undefined ? this.nom : <any>null;
        data["Prenom"] = this.prenom !== undefined ? this.prenom : <any>null;
        data["Trigramme"] = this.trigramme !== undefined ? this.trigramme : <any>null;
        data["IdBoond"] = this.idBoond !== undefined ? this.idBoond : <any>null;
        data["AdresseMail"] = this.adresseMail !== undefined ? this.adresseMail : <any>null;
        data["DisponibiliteId"] = this.disponibiliteId !== undefined ? this.disponibiliteId : <any>null;
        data["Telephone"] = this.telephone !== undefined ? this.telephone : <any>null;
        data["Poste"] = this.poste !== undefined ? this.poste : <any>null;
        data["TarifJournalier"] = this.tarifJournalier !== undefined ? this.tarifJournalier : <any>null;
        return data;
    }
}

export interface IDossierTechniqueInsertRequestDto {
    utilisateurId?: string;
    nom: string;
    prenom: string;
    trigramme: string;
    idBoond: string;
    adresseMail: string;
    disponibiliteId: string;
    telephone?: string | null;
    poste?: string | null;
    tarifJournalier?: number | null;
}

export class GetTrigrammeRequestDto implements IGetTrigrammeRequestDto {
    nom!: string;
    prenom!: string;

    constructor(data?: IGetTrigrammeRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nom = _data["Nom"] !== undefined ? _data["Nom"] : <any>null;
            this.prenom = _data["Prenom"] !== undefined ? _data["Prenom"] : <any>null;
        }
    }

    static fromJS(data: any): GetTrigrammeRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTrigrammeRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Nom"] = this.nom !== undefined ? this.nom : <any>null;
        data["Prenom"] = this.prenom !== undefined ? this.prenom : <any>null;
        return data;
    }
}

export interface IGetTrigrammeRequestDto {
    nom: string;
    prenom: string;
}

export class ReferenceDto implements IReferenceDto {
    id?: string;
    libelle?: string | null;
    commentaireFun?: string | null;

    constructor(data?: IReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"] !== undefined ? _data["Id"] : <any>null;
            this.libelle = _data["Libelle"] !== undefined ? _data["Libelle"] : <any>null;
            this.commentaireFun = _data["CommentaireFun"] !== undefined ? _data["CommentaireFun"] : <any>null;
        }
    }

    static fromJS(data: any): ReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id !== undefined ? this.id : <any>null;
        data["Libelle"] = this.libelle !== undefined ? this.libelle : <any>null;
        data["CommentaireFun"] = this.commentaireFun !== undefined ? this.commentaireFun : <any>null;
        return data;
    }
}

export interface IReferenceDto {
    id?: string;
    libelle?: string | null;
    commentaireFun?: string | null;
}

export class TrigrammeDto implements ITrigrammeDto {
    valeur!: string;

    constructor(data?: ITrigrammeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.valeur = _data["Valeur"] !== undefined ? _data["Valeur"] : <any>null;
        }
    }

    static fromJS(data: any): TrigrammeDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrigrammeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Valeur"] = this.valeur !== undefined ? this.valeur : <any>null;
        return data;
    }
}

export interface ITrigrammeDto {
    valeur: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}