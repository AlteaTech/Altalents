@using Altalents.MVC.Controllers.Admin;
@{
    ViewData["Title"] = LibellesResources.TitreDataControle;
    Layout = "_LayoutAdmin";
    // Dictionary<GridActionEnum, RouteActionModel> gridReferenceAValiderActionDictionary = new();
    // gridReferenceAValiderActionDictionary.Add(GridActionEnum.Get, new() { ActionName = RoutesNamesConstantes.MvcControllerDataControle_MethodeGetReferences, ControllerName = DataControleController.ControllerName, DynamicAdditionnalDataMethode = "gridReferenceAValiderGetAditionnalData" });
    // gridReferenceAValiderActionDictionary.Add(GridActionEnum.Update, new() { ActionName = RoutesNamesConstantes.MvcControllerDataControle_MethodeUpdateReference, ControllerName = DataControleController.ControllerName });
}

<script type="text/javascript">

    // OBLIGATOIRE : Définir l'URL pour le delete d'un DT
    const deleteRefUrl = '@Url.Action(RoutesNamesConstantes.MvcControllerDataControle_MethodeDeleteReference, DataControleController.ControllerName)';

    // OBLIGATOIRE : Définir l'URL pour le delete d'un DT
    const updateRefUrl = '@Url.Action(RoutesNamesConstantes.MvcControllerDataControle_MethodeUpdateReference, DataControleController.ControllerName)';


        // OBLIGATOIRE, pour recharger le tableau apres methode ajax
    function reloadGrid() {
        var gridDtAController = $("#gridReferenceAValider").data("kendoGrid");
         gridDtAController.dataSource.read();  // Ajoutez cette ligne pour recharger les données
    }

    var showOnlyDataAValider = true;

    function onChangeSwitchAValiderAll(e) {
        showOnlyDataAValider = false;
        if (e.checked) {
            showOnlyDataAValider = true;
        }
        reloadGrid();
    }

    function sendShowOnlyDataAValider() {
        return { showOnlyDataAValider: showOnlyDataAValider }; // Passer la variable JS
    }

</script>

<script src="~/js/modifier-ref.js"></script>
<script src="~/js/supprimer-ref.js"></script>

<h2>@ViewData["Title"]</h2>
<div class="row">
    <div class="col-12">
        Voir uniquement les données à valider : @(Html.Kendo().Switch()
        .Name("switchAValiderAll")
        .Checked(true) 
        .Events(ev => ev.Change("onChangeSwitchAValiderAll"))
        .Messages(c =>
        c.Checked("Oui")
        .Unchecked("Non")
        )
        )
    </div>

</div>


@(Html.Kendo().Grid<ReferenceAValiderDto>()
    .Name("gridReferenceAValider")
    .HtmlAttributes(new { @class = "h-90" })
    .Columns(columns =>
    {
        columns.Bound(p => p.TypeReference).Title(LibellesResources.ReferenceType).ClientTemplate("<span>#: TypeReferenceString #</span>");
        columns.Bound(p => p.Libelle).Title(LibellesResources.ReferenceLibelle);
        columns.Bound(p => p.Validated).Title(LibellesResources.Valide).ClientTemplate("#= Validated ? '<i class=\"fas fa-check text-success\"></i>' : '<i class=\"fas fa-times text-danger\"></i>' #")
    .Encoded(false); // Permet d'afficher le HTML correctement
        columns.Bound(p => p.CommentaireFun).Title(LibellesResources.ReferenceCommentaireFun);

        columns.Bound(p => p.NbDtAssocie).Title(LibellesResources.ReferenceNbDtAssocie);

        columns.Bound(p => p.Id).Title("<i class='fa fa-edit' aria-hidden='true'></i>").Filterable(false) // Pas de titre pour économiser de l'espace
           .ClientTemplate("<a title='Modifier cette référence' href='javascript:void(0);' onclick='openKendoReferenceWindow(\"#=Id#\", #=Validated#, \"#=Libelle#\", \"#=CommentaireFun#\")' class='k-link edit-link'>" +
                           "<i class='fa fa-edit' aria-hidden='true'></i>" +
                           "</a>")
              .Width(40);

        columns.Bound(p => p.Id).Title("<i class='fa fa-trash' aria-hidden='true'></i>").Filterable(false)
             .ClientTemplate("<a title='Cliquer pour supprimer définitivement cette référence' href='javascript:void(0);' class='k-link delete-link' onclick='onSupprimerReferenceClick(\"#=Id#\")'>" +
                             "<i class='fa fa-trash' aria-hidden='true'></i>" +
                             "</a>")
             .Width(40);
    })
      .CreateDefautToolBar(withCreate: false, withSearch: false)
        .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Action(RoutesNamesConstantes.MvcControllerDataControle_MethodeGetReferences, DataControleController.ControllerName).Data("sendShowOnlyDataAValider")))
    )

  @*   .Events(e => e.DataBound("onDataBoundReferenceAValiders"))
    .Sortable()
    .Filterable()
    .Scrollable()
    .CreateDefautPagger("", "Afficher les lignes de {0} à  {1} sur {2}")
    .CreateDefautToolBar(withCreate: false, creerTexte: "Créer une reference")
    .CreateDefautDataSource(gridReferenceAValiderActionDictionary, model => model.Id(p => p.Id), colonneTriInitiale: "TypeReference", colonneTriSecondaire:"Libelle") *@


@Html.Partial("_ModificationReferenceModal")
