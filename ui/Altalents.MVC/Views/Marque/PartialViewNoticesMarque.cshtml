@using Altalents.Entities.Enum;
@using Altalents.Entities.Extensions;
@using Altalents.MVC.Models.Marque;
@model PartialViewNoticesMarqueModel

@{
    bool IsFirst = true;
}

<script>
    function onAddNoticeMarqueButtonClick(e) {
        $("#ajoutNoticeMarqueButton").attr("disabled", "disabled");

        $.ajax({
            url: '@Url.Action("CreateNoticeMarque", MarqueController.ControllerName, new { marqueId = Model.IdMarque })',
            type: "POST",
            data: {
                Libelle: '@EnumOngletNoticeMarque.Annee2010.GetLibelleForOngletNoticeMarqueAttribute()',
                Ordre: 1
            },
            success: function (recData) {
                if (typeof (refreshNoticesMarque) === 'function') {
                    refreshNoticesMarque();
                }
            },
            error: function (recdata) {
                $("#ajoutNoticeMarqueButton").removeAttr("disabled");
                erreurFunction(recdata);
            },
            finalize: function () {

            }
        });
    }

    $(document).ready(function () {
        $("#published1921, #published1956").prop("disabled", true);
    });

    function onCheckBoxChange(e, noticesModel) {
        var checkbox = e.sender;
        var noticeLibelle = "@EnumOngletNoticeMarque.Annee2010.GetLibelleForOngletNoticeMarqueAttribute()";
        var currentNotice = getCurrentNoticeByLibelle(noticeLibelle, noticesModel);

        if (e.checked) {
            confirmMessage = "Êtes-vous sûr de vouloir publier la notice 2010 ? Si oui, cette marque sera affichée sur la page “nouveauté” pendant 3 mois à compter de ce jour.";
        } else {
            confirmMessage = "Êtes-vous sûr de vouloir dépublier la notice 2010 ? Si oui, si cette marque ne contient que la notice 2010, alors elle ne sera plus visible ni exportable et sera éligible à la prochaine campagne de publication collective “Publish all”.";
        }
    }

    function showConfirmation(message) {
        return new Promise(function (resolve) {
            var confirmed = confirm(message);
            resolve(confirmed);
        });
    }

    function getCurrentNoticeByLibelle(libelle, notices) {
        for (var i = 0; i < notices.length; i++) {
            if (notices[i].OngletName === libelle) {
                return notices[i];
            }
        }
        return null;
    }
</script>

@if (!Model.Notices.Any(x => x.OngletName == EnumOngletNoticeMarque.Annee2010.GetLibelleForOngletNoticeMarqueAttribute()))
{
    @(Html.Kendo().Button().CreateDefautButtonAjouterIcon("ajoutNoticeMarqueButton", "onAddNoticeMarqueButtonClick", LibellesResources.NoticeAjoutOnglet2010Btn))
}

@(Html.Kendo().TabStrip()
            .Name("noticeMarqueTabs")
            .Animation(animation =>
            {
                animation.Open(effect =>
            {
                effect.Fade(FadeDirection.In);
            });
            })
            .Items(tabstrip =>
            {
                foreach (NoticeMarqueDto notice in Model.Notices.OrderBy(x => x.OngletName)) {
                    bool isAnnee1921Or1956 = false;
                    string libelle1921 = EnumOngletNoticeMarque.Annee1921.GetLibelleForOngletNoticeMarqueAttribute();
                    string libelle1956 = EnumOngletNoticeMarque.Annee1956.GetLibelleForOngletNoticeMarqueAttribute();

                    if (libelle1921 != null && libelle1956 != null) {
                        isAnnee1921Or1956 =
                            notice.OngletName == libelle1921 || notice.OngletName == libelle1956;
                    }
                    object displayMode = isAnnee1921Or1956 ? new { disabled = "disabled" } : "";
                    tabstrip.Add().Text(notice.OngletName)
                    .Selected(IsFirst)
                    .Content(@<text>
                        @(Html.CreateDefautEditor(new() { Name = "text" + notice.Id.ToString(), Value = notice.Texte, HtmlAttributes = new { style = "width: 100%; height:300px" }, HasFontSizeEditor = true }))

                            @(Html.Kendo().CheckBox()
                    .Name("published" + notice.Id.ToString())
                    .Checked(notice.IsPublie)
                    .Label(LibellesResources.NoticePubliee)
                    .HtmlAttributes(displayMode)
                    .Events(e => e.Change("function(e) { onCheckBoxChange(e, " + Html.Raw(Json.Serialize(Model.Notices)) + "); }"))
                    )
                        </text>);
                    IsFirst = false;
                    }
                    }))
<script>
    function saveMarqueNotice() {
        var data = new Object();
    @Html.GetJsDictonnaryNotice("data", Model.Notices);
        for (let key in data) {
            var text = $("#text" + key).val();
            var isPublished = $("#published" + key).is(":Checked");
            if (isPublished && text == '') {
                showBusinessMessage('@BusinessExceptionsResources.TEXTE_NOTICE_REQUIRED')
                return;
            }

            data[key] = {
                "text": text,
                "isPublished": isPublished
            };
        }

        return $.ajax({
            url: '@Url.Action("UpdateNoticesMarque", MarqueController.ControllerName)',
            type: "PUT",
            data: data
        });
    }
</script>
